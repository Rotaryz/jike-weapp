<template>
  <!--<view class="slider" wx:if="{{list.length}}">-->
    <!--<view class="slider-content">-->
      <!--<view class="slider-content-ul" style="transition:{{transition}}; transform: translateX({{list.length===1?0:translateX}}px)"-->
            <!--bindtouchstart="touchBegin" bindtouchmove="touching" bindtouchend="touchEnd" animation="{{animationData}}">-->
        <!--<view class="slider-item" wx:if="{{list.length!==1}}">-->
          <!--<image src="{{list[list.length-1].image.url}}" class="slider-item-img" mode="widthFix"></image>-->
        <!--</view>-->
        <!--<view class="slider-item" wx:for="{{list}}" wx:key="{{item}}">-->
          <!--<image src="{{item.image.url}}" class="slider-item-img" mode="widthFix"></image>-->
        <!--</view>-->
        <!--<view class="slider-item" wx:if="{{list.length!==1}}">-->
          <!--<image src="{{list[0].image.url}}" class="slider-item-img" mode="widthFix"></image>-->
        <!--</view>-->
      <!--</view>-->
    <!--</view>-->
  <!--</view>-->
  <view class="slider">
    <view class="swiper-content">
      <swiper previous-margin="20px" next-margin="20px" circular autoplay interval="3000" duration="300" class="swiper-box">
        <block wx:for="{{list}}" wx:key="{{index}}">
          <swiper-item class="item-box">
            <view class="img-box">
              <image src="{{item.image.url}}" class="shop-img" mode="widthFix"></image>
            </view>
          </swiper-item>
        </block>
      </swiper>
    </view>
  </view>
</template>

<script>
  /* eslint-disable no-undef */
  import wepy from 'wepy'

  export default class Slider extends wepy.component {
    props = {
      list: {
        type: Array,
        default: []
      }
    }

    data = {
      indicatorDots: false,
      autoplay: false,
      interval: 5000,
      duration: 1000,
      swiperCurrent: 1,
      circular: true,
      beginClient: 0,
      endClient: 0,
      animationData: '',
      animation: '',
      translateX: '',
      transition: '',
      beginX: '',
      index: 1,
      maxLength: 0,
      baseTranslateX: '',
      casualTranslateX: '',
      moveing: false,
      timer: null
    }

    async onLoad() {
//      let res = await wepy.getSystemInfo()
//      let maxWidth = res.screenWidth
//      this.translateX = -0.893332 * maxWidth * this.index
//      this.baseTranslateX = 0.893332 * maxWidth
//      this.$apply()
    }

    _autoPlayMove() {
      this.index ++
      this.transition = 'all .3s'
      this.translateX = this.index * this.baseTranslateX * -1
      if (this.index === this.maxLength - 1) {
        setTimeout(() => {
          this.transition = ''
          this.index = 1
          this.translateX = this.baseTranslateX * -1
          this.$apply()
        }, 300)
      }
      this.$apply()
    }

    _autoPlay() {
      clearInterval(this.timer)
      this.timer = setInterval(() => {
        this._autoPlayMove()
      }, 3000)
      this.$apply()
    }

    methods = {
      init(num) {
        this.maxLength = num * 1 + 2
        this._autoPlay()
        this.$apply()
      },
      stop() {
        clearInterval(this.timer)
        this.$apply()
      },
      changeVal(e) {
        this.swiperCurrent = e.detail.current
      },
      touchBegin(e) {
        clearInterval(this.timer)
        if (this.moveing) {
          return
        }
        if (!this.maxLength) {
          this.maxLength = this.list.length + 2
        }
        this.beginClient = e.changedTouches[0].clientX
        this.casualTranslateX = this.translateX
        this.transition = ''
        this.$apply()
      },
      touchEnd(e) {
        this.moveing = true
        this.endClient = e.changedTouches[0].clientX
        let delta = this.endClient - this.beginClient
        if (delta < -100) {
          this.transition = 'all .3s'
          this.index = this.index + 1
          this.translateX = this.index * this.baseTranslateX * -1
          setTimeout(() => {
            this.moveing = false
          }, 300)
          if (this.index === this.maxLength - 1) {
            setTimeout(() => {
              this.transition = ''
              this.index = 1
              this.translateX = this.baseTranslateX * -1
              this.$apply()
            }, 300)
          }
          this.$apply()
        } else if (delta > 100) {
          this.transition = 'all .3s'
          this.index = this.index - 1
          this.translateX = this.index * this.baseTranslateX * -1
          setTimeout(() => {
            this.moveing = false
          }, 300)
          if (this.index === 0) {
            setTimeout(() => {
              this.transition = ''
              this.index = this.maxLength - 2
              this.translateX = this.baseTranslateX * -1 * this.index
              this.$apply()
            }, 300)
          }
          this.$apply()
        } else {
          this.transition = 'all .3s'
          this.translateX = this.baseTranslateX * -1 * this.index
          setTimeout(() => {
            this.moveing = false
          }, 300)
          this.$apply()
        }
        this._autoPlay()
        this.$apply()
      },
      touching(e) {
        clearInterval(this.timer)
        if (this.moveing) {
          return
        }
        let targetX = e.changedTouches[0].clientX
        this.translateX = this.casualTranslateX + (targetX - this.beginClient)
      }
    }
  }
</script>

<style lang="stylus">
  @import "../../common/stylus/variable"
  .slider
    width: 100%
    height: 100%
    position: absolute
    left: 0
    top: 0
    .swiper-content
      width: 100%
      height: 100%
      .swiper-box
        width: 100%
        height: 100%
        .item-box
          box-sizing: border-box
          padding: 0 5px
          .img-box
            width: 100%
            height: 100%
            border-radius: 4px
            overflow: hidden
            background: $color-master-gray
            .shop-img
              width: 100%
    .slider-content
      position: absolute
      width: 86.6666vw
      height: 40vw
      top: 50%
      left: 50%
      transform: translate(-50%, -50%)
      .slider-content-ul
        display: flex
        .slider-item
          width: 86.6666vw
          height: 40vw
          margin-right: 2.6666vw
          overflow: hidden
          background: $color-master-gray
          border-radius: 4px
          .slider-item-img
            width: 86.6666vw


</style>
