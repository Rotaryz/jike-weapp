<template>
  <view class="view-page">
    <view class="view-scroll">
      <swiper class="swiper" bindchange="swBindchange">
        <repeat for="{{titleList}}" key="index" index="index" item="item">
          <swiper-item class="item-swi">
            <view class="swiper-info"></view>
            <view class="swiper-info-s">
              <view class="swiper-info-title">
                <view class="swiper-info-shop">
                  <view class="view_1">白云店</view>
                  <view class="view_2">800米</view>
                </view>
                <view class="swiper-info-remark">
                  <view class="view_1">
                    <view class="view_1_1"><view class="bg"></view>大众点评4.5分</view>
                    <view class="view_1_2">团</view>
                    <view class="view_1_2">买</view>
                    <view class="view_1_2">券</view>
                  </view>
                  <view class="view_2">
                    <image src="{{imageUri + '/defaults/c-image/square/icon-s_right2@2x.png'}}"></image>
                  </view>
                </view>
              </view>
              <view class="border-1px"></view>
              <view class="swiper-info-nav">
                <view class="nav-item">
                  <image src="{{imageUri + '/defaults/c-image/square/icon-address_home@2x.png'}}"></image>
                  <view>精选优惠</view>
                </view>
                <view class="nav-item">
                  <image src="{{imageUri + '/defaults/c-image/square/icon-address_home@2x.png'}}"></image>
                  <view>优质内容</view>
                </view>
                <view class="nav-item">
                  <image src="{{imageUri + '/defaults/c-image/square/icon-address_home@2x.png'}}"></image>
                  <view>快捷买单</view>
                </view>
              </view>
            </view>
            <image class="item-img" src="{{item.shop_image}}"></image>
          </swiper-item>
        </repeat>
      </swiper>
      <view class="swiper-active">
        <view class="swiper-active-t">
          <repeat for="{{titleList}}" key="index" index="index" item="item">
            <view class="item-swi {{index === topFlag ? 'action' : ''}}"></view>
          </repeat>
        </view>
      </view>
    </view>
    <map id="map"
         scale="18"
         longitude="{{longitude}}"
         latitude="{{latitude}}"
         controls="{{controls}}"
         bindcontroltap="controltap"
         markers="{{markers}}"
         bindmarkertap="markertap"
         polyline="{{polyline}}"
         bindtap="tapMap"
         bindregionchange="regionchange">
      <cover-view class="modal-bg-wrapper"></cover-view>
    </map>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import users from 'common/mixins/users'
  import base from 'common/mixins/base'
  import {ERR_OK} from 'api/base'
  import Merchants from 'api/merchants'
  import URIS from 'common/js/config'
  import GDMap from 'common/libs/amap-wx'

  export default class Square extends wepy.page {
    mixins = [users, base]

    data = {
      imageUri: URIS.image,
      firstUpdate: false,
      map: false,
      isControlSlide: false,
      showSlide: true,
      location: {},
      longitude: '',
      latitude: '',
      moveLongitude: '',
      moveLatitude: '',
      merchants: [],
      currentMerchant: {},
      stars: [],
      distance: '',
      duration: '',
      locations: {},
      markers: [],
      polyline: [],
      controls: [],
      includePoints: [],
      promotions: [],
      bigMarkerIndex: 0,
      activeMarkerId: '',
      tips: [],
      scrollHeight: 60,
      activeIndex: 0,
      transform: '',
      transition: '',
      titleList: [],
      topFlag: 0
    }

    async onLoad() {
      this._newMap()
      await this.load()
      this.loaded()
    }
    async getShop() {

    }
    async onShow() {
      console.log(this)
      await this.showIndustry()
      let shopName = wepy.getStorageSync('shop') ? wepy.getStorageSync('shop').shop_name : this.shopName
      this.clearTimer()
      await this.show()
      wepy.setNavigationBarTitle({
        title: shopName
      })
      this.loaded()
    }

    onHide() {
      this.clearTimer()
      this.isControlSlide = true
    }

    _newMap() {
      this.gdmapsdk = new GDMap.AMapWX({key: 'd3950730147fbf5fe991ecc0344968b4'})
    }

    async load() {
      await this._newMapContext()
    }

    async show() {
      await this._setLoaction()
      await this._setControls()
      await this._getPlazaMerchants()
//      await this._translateMarkers()
      if (this.isControlSlide) {
        this.controlSlide()
      }
    }

    controlSlide() {
      const activeIndex = this.markers.find((item) => item.id === this.activeMarkerId)
      if (activeIndex === -1) {
        this.showSlide = false
        this.$apply()
        return
      }
      this.activeIndex = 0
      this.transition = ''
      this.transform = 'translate3d(0, 0, 0)'
      this._setTipTimer()
    }

    async _newMapContext() {
      this.mapContext = wepy.createMapContext('map')
    }

    async _setLoaction() {
      const res = await wepy.getLocation({type: 'gcj02'})
      this.location = {
        latitude: res.latitude,
        longitude: res.longitude
      }
      const location = [{
        id: 0,
        iconPath: './icon-s_sister@2x.png',
        latitude: res.latitude,
        longitude: res.longitude,
        width: 18,
        height: 27
      }]
      this.locations = location
      this.$apply()
    }

    async _setControls() {
      const res = await wepy.getSystemInfo()
      let width = res.windowWidth
      let height = res.windowHeight
      this.controls.push({
        id: 1,
        iconPath: './icon-s_return@2x.png',
        clickable: true,
        position: {
          width: 36,
          height: 36,
          left: width - 49,
          top: height - 85
        }
      })
    }

    async _getPlazaMerchants() {
      const json = await Merchants.getPlazaMerchantsNew()
      console.log(json)
      for (let i = 0; i < 3; i++) {
        console.log(i)
        this.titleList.push(json.data[0])
      }
      this.$apply()
      if (json.error === ERR_OK) {
        const res = json.data
        this.merchants = res
        res.forEach((item) => {
          if (item.current_merchant) {
            this.activeMarkerId = item.id
            this.longitude = item.longitude
//            this.latitude = item.latitude
            this.latitude = item.latitude + 0.001
            this.$apply()
          }
        })
        const markers = res.map((item) => {
          if (item.id === this.activeMarkerId) {
            return {
              iconPath: `./icon-s_${item.industry.code_name}@2x.png`,
              id: item.id,
              latitude: item.latitude,
              longitude: item.longitude,
              width: 48,
              height: 50,
              hasActivity: item.has_activity
            }
          }
          return {
            iconPath: `./icon-s_${item.industry.code_name}@2x.png`,
            id: item.id,
            latitude: item.latitude,
            longitude: item.longitude,
            width: 32,
            height: 34,
            hasActivity: item.has_activity
          }
        })
        this.markers = [...this.locations, ...markers]
        this.bigMarkerIndex = this.markers.findIndex((item) => item.id === this.activeMarkerId)
        this._setPolyline(this.markers[this.bigMarkerIndex].id)
        this._scaleMarker(1)
        const currentMerchant = res.find((item) => item.id === this.activeMarkerId)
        await this._getMerchantDetail(currentMerchant.merchant_id)
//          setTimeout(() => {
//            this.showSlide = true
//            this.$apply()
//          }, 3000)
        this._setIncludePoints([])
        this.$apply()
      }
    }

    _setIncludePoints(points) {
      this.includePoints = points
      this.$apply()
    }

    _setPolyline(id) {
      const location = this.markers.find((item) => item.id === 0)
      const target = this.markers.find((item) => item.id === id)
      this.polyline = [{
        points: [
          {
            latitude: location.latitude,
            longitude: location.longitude
          }, {
            latitude: target.latitude,
            longitude: target.longitude
          }
        ],
        color: '#706B82AA',
        width: 2,
        dottedLine: true
      }]
      this.$apply()
    }

    async _translateMarkers() {
      this.markers.forEach((item) => {
//        console.log(item)
      })
    }

    async _getMerchantDetail(id) {
      const json = await Merchants.getMerchantsDetail(id)
      if (json.error === ERR_OK) {
        const res = json.data
        this.currentMerchant = res
        let shop = wepy.getStorageSync('shop')
        shop.shop_name = res.shop_name
        wepy.setStorageSync('shop', shop)
        this.promotions = res.promotions
        const starLevel = res.star_level === '0.0' ? 5 : res.star_level
        this.stars = new Array(Math.floor(starLevel))

        this.$apply()
        this.loaded()
        this._setTips()
        this._caculateDistance()
        this._setTipInterval()
      }
    }

    _setTips() {
      const activities = this.currentMerchant.activities
      const promotions = this.promotions
      let tips = []
      for (let key in activities) {
        if (activities[key]) {
          tips.push({activity: this._translateActivityKey(key)})
        }
      }
      tips.forEach((item, index) => {
        let init = {title: ''}
        if (promotions[index]) {
          init = promotions[index]
        }
        item = Object.assign(item, init)
      })
      if (tips.length) {
        tips.push(tips[0])
      }
      this.tips = tips
    }

    _translateActivityKey(key) {
      switch (key) {
        case 'lucky_draw':
          return '幸运大转盘'
        case 'sign':
          return '签到红包'
        case 'video_live':
          return '直播优惠'
        case 'share':
          return '分享有礼'
        default:
          return ''
      }
    }

    _caculateDistance() {
      // 腾讯
//      this.qqmapsdk.calculateDistance({
//        mode: 'driving',
//        from: this.location,
//        to: [{
//          latitude: this.currentMerchant.latitude,
//          longitude: this.currentMerchant.longitude
//        }],
//        success: (res) => {
//          console.log(res)
//          const result = res.result.elements[0]
//          this.distance = Math.floor(result.distance)
//          this.duration = Math.floor(result.duration / 60)
//          this.$apply()
//        }
//      })
      // 高德
      this.gdmapsdk.getWalkingRoute({
        origin: this.location.longitude + ',' + this.location.latitude,
        destination: this.currentMerchant.longitude + ',' + this.currentMerchant.latitude,
        success: (res) => {
          const result = res.paths[0]
          this.distance = Math.floor(result.distance)
          this.duration = Math.floor(result.duration / 60)
          this.$apply()
        }
      })
    }

    _scaleMarker(type) {
      const index = this.bigMarkerIndex
      if (index === 0) {
        return
      }
      this.markers[index].width = type === 1 ? 48 : 32
      this.markers[index].height = type === 1 ? 50 : 34
      this.$apply()
    }

    _setTipInterval() {
      const tipsLength = this.tips.length
      this.scrollHeight = 60 * tipsLength
      this._setTipTimer()
    }

    _setTipTimer() {
      const tipsLength = this.tips.length
      if (!tipsLength) {
        return
      }
      clearInterval(this.tipTimer)
      this.tipTimer = setInterval(() => {
        this.activeIndex += 1
        if (this.activeIndex === tipsLength) {
          this.tipTimeOuter = setTimeout(() => {
            this.activeIndex = 0
            this.transition = ''
            this.transform = 'translate3d(0, 0, 0)'
            this.$apply()
          }, 500)
        } else {
          this.transition = 'all .5s'
          this.transform = `translate3d(0, -${this.activeIndex * 60}px, 0)`
        }
        this.$apply()
      }, 3000)
    }

    clearData() {
      this.clearTimer()
      this._scaleMarker(0)
      this._setPolyline(0)
      this.$apply()
    }

    clearTimer() {
      this.activeIndex = 0
      this.tipTimer && clearInterval(this.tipTimer)
      this.tipTimeOuter && clearTimeout(this.tipTimeOuter)
      this.$apply()
    }

    methods = {
      swBindchange (e) {
        this.topFlag = e.detail.current
        this.$apply()
      },
      switchRecommend() {
        const merchantId = this.currentMerchant.merchant_id
//        this.$parent.updateGlobalData('merchantId', merchantId)
        wepy.setStorageSync('merchantId', merchantId)
        wepy.switchTab({url: '/pages/recommend/recommend'})
      },
      async tapMap(e) {
//        if (!this.showSlide) {
//          return
//        }
//        this.clearData()
//        this.showSlide = false
      },
      async regionchange(e) {
//        this.mapContext.getCenterLocation({
//          success: (res) => {
//            this.moveLongitude = res.longitude
//            this.moveLatitude = res.latitude
//            if ((this.moveLongitude !== this.longitude || this.moveLatitude !== this.latitude) && this.showSlide) {
//              this.clearData()
//              this.showSlide = false
//            }
//            this.$apply()
//          }
//        })
      },
      controltap(e) {
        if (e.controlId === 1) {
          this.latitude = this.moveLatitude
          this.longitude = this.moveLongitude
          setTimeout(() => {
            this.latitude = this.location.latitude
            this.longitude = this.location.longitude
            this.$apply()
          }, 20)
        }
      },
      async markertap(e) {
        let markerId = e.markerId
        if (this.activeMarkerId === markerId && this.showSlide) {
          return
        }
        this.activeMarkerId = markerId
        this.clearData()
        if (markerId === 0) {
          return
        }
        let currentMerchant = this.merchants.find((item) => item.id === markerId)
        await this._getMerchantDetail(currentMerchant.merchant_id)
        this.activeIndex = 0
        this.transition = ''
        this.transform = 'translate3d(0, 0, 0)'
        this._setPolyline(markerId)
        this.bigMarkerIndex = this.markers.findIndex((item) => item.id === markerId)
        this._scaleMarker(1)
        this.$apply()
        setTimeout(() => {
          if (!this.showSlide) {
            this.showSlide = true
          }
          this.transition = 'all .5s'
          this.$apply()
        }, 500)
      },
      makePhoneCall() {
        const phone = this.currentMerchant.mobile
        wepy.makePhoneCall({phoneNumber: phone})
      },
      openLocation() {
        wepy.openLocation({
          latitude: this.currentMerchant.latitude,
          longitude: this.currentMerchant.longitude,
          scale: 28,
          name: this.currentMerchant.shop_name,
          address: this.currentMerchant.particular_address
        })
      }
    }

    // 分享
    onShareAppMessage() {
      let merchantId = wepy.getStorageSync('merchantId')
      return {
        title: wepy.getStorageSync('shop').shop_name,
        path: `/pages/square/square?merchantId=${merchantId}`
      }
    }

    config = {
      navigationBarTitleText: ''
    }
  }

</script>
<style lang="stylus">
  @import "../../common/stylus/variable.styl"
  @import "../../common/stylus/mixin.styl"
  .view-page
    display: flex
    flex-direction: column
    .view-scroll
      height: 190px
      box-shadow: 0 6px 4px 0 rgba(0,0,0,0.06);
      background: #FFFFFF
      position: relative
      .swiper
        height: 160px
        border-radius: 4px
        display: flex
        .item-swi
          height 160px
          text-align: center
          position: relative
          .swiper-info
            position: absolute
            top: 0
            left: 0
            right: 0
            bottom: 0
            z-index: 1
            height: 100%
            width: 94%
            margin: auto
            opacity: 0.5
            background-image: linear-gradient(-90deg, #000000 1%, #000000 100%)
            border-radius: 4px
          .swiper-info-s
            position: absolute
            top: 0
            left: 0
            right: 0
            bottom: 0
            z-index: 2
            height: 100%
            width: 94%
            margin: auto
            border-radius: 4px
            .swiper-info-title
              height: 60px
              margin: 0px 10px
              .swiper-info-shop
                justify-content:space-between
                display: flex
                padding: 10px 0px 6px 0px
                .view_1
                  color: $color-white
                  font-family: $font-family-meddle
                  font-size: $font-size-medium-x
                .view_2
                  font-family: $font-family-light
                  font-size: $font-size-small-s
                  color: $color-white
                  line-height: 20px
              .swiper-info-remark
                justify-content:space-between
                display: flex
                .view_1
                  display: flex
                  flex-direction: row
                  .view_1_1
                    line-height: 18px
                    width: 74px
                    height: 18px
                    border-radius: 4px
                    color: $color-white
                    font-family: $font-family-regular
                    font-size: $font-size-small-s
                    position: relative
                    margin-right: 15px
                    .bg
                      position: absolute
                      top: 0
                      left: 0
                      width: 74px
                      height: 18px
                      opacity: 0.5
                      background: #000000
                      border-radius: 4px
                      z-index: -1
                  .view_1_2
                    width: 18px
                    height: 18px
                    background: #FF4E00
                    border-radius: 4px
                    font-family: $font-family-regular
                    font-size: $font-size-small-s
                    color: #FFFFFF
                    line-height: 18px
                    text-align: center
                    margin-right: 5px
                .view_2
                  font-family: $font-family-light
                  font-size: $font-size-small-s
                  color: $color-white
                  width: 8px
                  height: 10px
                  margin-top: 4px
                  image
                    width: 100%
                    height: 100%
            .border-1px
              opacity: 0.22
              border: .5px solid $color-white
              width: 94%
              margin: auto
            .swiper-info-nav
              display: flex
              justify-content: space-around
              flex-direction: row
              z-index: 1
              .nav-item
                width: 50px
                height: 84.5px
                margin-top: 13.5px
                image
                  width: 50px
                  height: 50px
                view
                  color: $color-white
                  font-family: $font-family-regular
                  font-size: $font-size-small
                  line-height: 24px
          .item-img
            border-radius: 4px
            width: 94%
            height: 100%
            // opacity: 0.5
            // background-image: linear-gradient(-90deg, #000000 1%, #000000 100%)
      .swiper-active
        height: 5px
        text-align: center
        display: flex
        flex-direction: row
        .swiper-active-t
          margin: auto
          .item-swi
            width: 5px
            height: 5px
            background: #D8D8D8
            border-radius: 100%
            display: inline-block
            margin: 0px 3px
            transition: all .3s
          .item-swi.action
            transition: all .3s
            width: 10px
            border-radius: 100px
            background: #706B81
  #map
    width: 100%
    height: 100vh
    position: relative

    .modal-bg-wrapper
      height: 1px
      position: absolute
      top: 0
      left: 0
      display: flex
      padding: 0
      box-sizing: border-box
      box-shadow: 0 6px 4px 0 rgba(0,0,0,0.06);
      left: 0
      top: 0
</style>
